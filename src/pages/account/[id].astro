---
import { getAccount, getTransactions, setDB, sumTransactions } from '../../api';
import TransactionLI from '../../components/TransactionLI.astro';
import Main from '../../layouts/Main.astro';
import { currentUser, defaultCategory, textToColor } from '../../utils';

setDB(Astro.locals.runtime?.env?.DB);

const profile = await currentUser(Astro.cookies);

if (!profile) {
	return Astro.redirect('/login');
}

const account = Astro.params.id ? await getAccount(Astro.params.id) : null;

if (!account) {
	return Astro.rewrite('/404');
}

if (account.profile != profile.id) {
	return Astro.rewrite('/403');
}

const transactions = account && (await getTransactions(account.id));

const balance = sumTransactions(transactions, account.id);

const mobile = false;

const categories = Object.entries(transactions ? Object.groupBy(transactions, (tx) => tx.metadata.category || defaultCategory(tx, account)) : {}).map(([category, txs]) => [category, sumTransactions(txs)]) as [string, number][];

const colors = new Map(categories.map(([name]) => [name, textToColor(name)]));

const maxHeight = categories.reduce((max, [_, value]) => Math.max(max, value), 0);

import '../../styles/li.css';
import '../../styles/transaction-li.css';
import { capitalize } from 'utilium';
---
<style>
	.header {
		font-weight: bold;
		border: none;
	}

	ul {
		padding-left: 0;
	}

	.overview {
		border: none;
		display: grid;
		grid-template: repeat(3, 2em) / repeat(2, 1fr);
		gap: 1em;
		align-items: stretch;
		
		p.id {
			grid-column: 1;
			grid-row: 1;
		}

		p.nick {
			grid-column: 1;
			grid-row: 2;
		}

		p.balance {
			grid-column: 1;
			grid-row: 3;
		}

		.graph {
			grid-column: 2;
			grid-row: 1 / 4;
			text-align: right;
			align-self: stretch;

			svg {
				width: 100%;
				height: 100%;
			}
		}
	}
</style>
<Main title="Account">
	<div>
		{!transactions ? <p><em>Couldn't fetch your transactions.</em></p> : <ul>
			{!mobile && <div class="overview li">
				<p class="id">{capitalize(account.type)} Account #{account.id}</p>
				<p class="nick">Nickname: {account.name}</p>
				<p class="balance">Balance: {typeof balance != 'number' ? 'Unknown' : `${balance >= 0 ? '' : '-'}$${Math.abs(balance)}`}</p>
				<div class="graph">
					<svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="none" viewBox={`0 0 ${Math.max(categories.length * 2, 10)} 1`}>
						{categories.map(([name, total], i) => <rect
							x={2*i}
							width="1"
							height={Math.max(total / maxHeight, 0.1)}
							style={'fill:' + colors.get(name)}
							transform="scale(1, -1) translate(0, -1)"
							x-category={name}
							x-amount={total}
						/>)}
					</svg>
				</div>
			</div>}
			<li class="header">
				<p class="memo">Memo</p>
				<p class="amount">Amount</p>
				<p class="timestamp">Time</p>
				<p class="details">Details</p>
			</li>
			{transactions.map(tx => <TransactionLI transaction={tx} account={account.id} memoColor={colors.get(tx.metadata.category!)} />)}
		</ul>}

		<br />
		<div class="center"><a href="/transaction/new"><button>Add a transaction</button></a></div>
	</div>
</Main>
