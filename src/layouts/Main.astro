---
import { Profile, setDB } from '../api';
import '../styles/styles.css';
import '../styles/website.css';
import { currentUser } from '../utils';
import type { Contributor, User } from '../api/github'

interface Props {
	title: string;
	navTitle?: string;
	profile?: Profile;
}

setDB(Astro.locals.runtime?.env?.DB);

const { title, navTitle = '', profile = await currentUser(Astro.cookies) } = Astro.props;

let users: User[];
try {
	const requestInit: RequestInit = {
		headers: {
			'User-Agent': 'github.com/iit-a-star/financial-journey'
		}
	};

	users = await fetch('https://api.github.com/repos/iit-a-star/journey/contributors', requestInit)
		.then(res => res.json())
		.then((contributors: Contributor[]) => Promise.all(contributors
			.sort((a, b) => a.contributions > b.contributions ? -1 : 1)
			.map(({ url }) => fetch(url, requestInit).then(res => res.json()) as Promise<User>)
		))
		.catch(() => []);

} catch {
	users = [];
}
 
---

<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/png" href="/icon.png" />
		<meta name="description" content="A simple financial app" />
		<meta name="author" content="James Prevett,Joanne Porter,Michaelangelo Eldridge,Numa Fatima" />
		<meta name="generator" content={Astro.generator} />
		<title>Journey - {title}</title>
		<slot name="in-header" />
	</head>
	<body>
		<nav>
			<a class="home" href="/">
				<svg xmlns="http://www.w3.org/2000/svg" class="icon"><use href="/icons.svg#house"></use></svg>
				<strong>Financial Journey</strong>
			</a>
			<span class="title">{navTitle}</span>
			
			<a class="profile" href={profile ? '/profile' : '/login'}>
				{profile ? <>
					<svg xmlns="http://www.w3.org/2000/svg" class="icon"><use href="/icons.svg#user" /></svg>
					<span>{profile.name}</span>
				</> : 'Login'}
			</a>
			{profile && <a class="logout" href="/logout">Log&nbsp;out</a>}	
		</nav><br /><br />

		<script>
			let hue = 0,
				i: number | undefined;

			function stobe_start() {
				if (i) {
					return;
				}

				console.debug('Strobe started');

				hue = 0;
				i = setInterval(() => {
					hue = (hue + 1) % 360;
					document.documentElement.style.setProperty('--hue', (hue + 16).toString());
					document.documentElement.style.setProperty('--hue-nav', hue.toString());
				}, 50) as unknown as number;
			}

			function stobe_stop() {
				if (!i) {
					return;
				}

				console.debug('Strobe ended');

				clearInterval(i);
				i = undefined;
			}

			document.body.addEventListener('keydown', e => {
				if (e.key == 'J' && e.shiftKey && e.ctrlKey) {
					e.preventDefault();
					i ? stobe_stop() : stobe_start();
				}
			});
		</script>
		<slot />
		<footer>
			<p class="left">Copyright &copy; {users.length 
				? <span>{users.map(user => user.name).join(', ')}</span>
				: <a href="/github/contributors">contributors</a>}
			</p>
			<p class="right"></p>
		</footer>
	</body>
</html>
